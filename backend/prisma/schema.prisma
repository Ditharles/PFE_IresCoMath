generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) @unique
  email         String    @unique
  password      String
  role          Role
  sessions      Session[]
  notifications Notification[]
  doctorant     Doctorant?
  master        Master?
  enseignant    EnseignantChercheur?
  admin         Admin?
  createdAt     DateTime  @default(now())
bankData String? @unique
signature String?

  /// Index pour améliorer les performances des requêtes
  @@index([email])
}

model Doctorant {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String

  annee_these        Int
  directeur_these    EnseignantChercheur @relation(fields: [directeur_these_id], references: [id])
  directeur_these_id String
  photo              String?
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId             String            @unique

  /// Index pour améliorer les performances des requêtes
  @@index([userId])
}

model RequestDoctorant {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique

  annee_these        Int

  createdAt          DateTime          @default(now())
  directeur_these    EnseignantChercheur @relation(fields: [directeur_these_id], references: [id])
  directeur_these_id String
  status             RequestStatus     @default(PENDING)
  rejectionReason    String?
  photo              String?
  isConfirm          Boolean           @default(false)

  /// Index pour améliorer les performances des requêtes
  @@index([email])
}

model Master {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  encadrant          EnseignantChercheur @relation(fields: [encadrant_id], references: [id])
  encadrant_id       String

  annee_master       Int
  photo              String?
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId             String            @unique

  /// Index pour améliorer les performances des requêtes
  @@index([userId])
}

model RequestMaster {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique

  annee_master       Int

  createdAt          DateTime          @default(now())
  encadrant          EnseignantChercheur @relation(fields: [encadrant_id], references: [id])
  encadrant_id       String
  status             RequestStatus     @default(PENDING)
  rejectionReason    String?
  photo              String?
  isConfirm          Boolean           @default(false)

  /// Index pour améliorer les performances des requêtes
  @@index([email])
}

model EnseignantChercheur {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  fonction           String
  grade              Grade
  etablissement      String
  doctorants         Doctorant[]
  masters            Master[]

  requestsMaster     RequestMaster[]
  requestsDoctorant  RequestDoctorant[]
  photo              String?
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId             String            @unique

  /// Index pour améliorer les performances des requêtes
  @@index([userId])
}

model RequestEnseignantChercheur {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String

  email              String            @unique
  fonction           String
  grade              Grade
  etablissement      String
  status             RequestStatus     @default(PENDING)
  isConfirm          Boolean           @default(false)
  rejectionReason    String?
  photo              String?
  createdAt          DateTime          @default(now())

  /// Index pour améliorer les performances des requêtes
  @@index([email])
}

model Admin {
  id            Int       @id @default(autoincrement())
  nom           String
  prenom        String

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId        String    @unique

  /// Index pour améliorer les performances des requêtes
  @@index([userId])
}

model Session {
  id            String    @id @default(uuid()) @unique
  accessToken   String    @unique
  refreshToken  String    @unique
  machine       String
  createdAt     DateTime  @default(now())

  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId        String    
}
model Notification {
  id          Int              @id @default(autoincrement())
  message     String
  recipient   String
  status      NotificationStatus @default(UNREAD)
  createdAt   DateTime         @default(now())

  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  userId      String
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum Grade {
  Assistant
  MaitreAssistant
  MaitreDeConference
  Professeur
}

enum Role {
  ADMIN
  DOCTORANT
  MASTER
  ENSEIGNANT
  DIRECTEUR
}
