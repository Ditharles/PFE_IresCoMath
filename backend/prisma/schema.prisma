generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String
  role          Role
  sessions      Session[]
  notifications Notification[]
  doctorant     Doctorant?
  master        Master?
  enseignant    EnseignantChercheur?
  admin         Admin?
  createdAt     DateTime  @default(now())
  requests      Request[]
  bankData      String?   @unique
  signature     String?

  historiqueMaterials HistoriqueMaterial[] 

  @@index([email])
}


model Doctorant {
  id                 String              @id @default(uuid())
  nom                String
  prenom             String
  annee_these        Int
  directeur_these    EnseignantChercheur @relation(fields: [directeur_these_id], references: [id])
  directeur_these_id String
  photo              String?
  user               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String              @unique

  @@index([userId])
}

model RequestDoctorant {
  id                 String              @id @default(uuid())
  nom                String
  prenom             String
  email              String              @unique
  annee_these        Int
  createdAt          DateTime            @default(now())
  directeur_these    EnseignantChercheur @relation(fields: [directeur_these_id], references: [id])
  directeur_these_id String
  status             RequestStatus       @default(PENDING)
  rejectionReason    String?
  photo              String?
  isConfirm          Boolean             @default(false)

  @@index([email])
}

model Master {
  id            String              @id @default(uuid())
  nom           String
  prenom        String
  encadrant     EnseignantChercheur @relation(fields: [encadrant_id], references: [id])
  encadrant_id  String
  annee_master  Int
  photo         String?
  user          User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String              @unique

  @@index([userId])
}

model RequestMaster {
  id            String              @id @default(uuid())
  nom           String
  prenom        String
  email         String              @unique
  annee_master  Int
  createdAt     DateTime            @default(now())
  encadrant     EnseignantChercheur @relation(fields: [encadrant_id], references: [id])
  encadrant_id  String
  status        RequestStatus       @default(PENDING)
  rejectionReason String?
  photo         String?
  isConfirm     Boolean             @default(false)

  @@index([email])
}

model EnseignantChercheur {
  id                 String               @id @default(uuid())
  nom                String
  prenom             String
  fonction           String
  grade              Grade
  etablissement      String
  doctorants         Doctorant[]
  masters            Master[]
  requestsMaster     RequestMaster[]
  requestsDoctorant  RequestDoctorant[]
  photo              String?
  user               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String               @unique

  @@index([userId])
}

model RequestEnseignantChercheur {
  id               String        @id @default(uuid())
  nom              String
  prenom           String
  email            String        @unique
  fonction         String
  grade            Grade
  etablissement    String
  status           RequestStatus @default(PENDING)
  isConfirm        Boolean       @default(false)
  rejectionReason  String?
  photo            String?
  createdAt        DateTime      @default(now())

  @@index([email])
}

model Admin {
  id       Int   @id @default(autoincrement())
  nom      String
  prenom   String
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @unique

  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  accessToken  String   @unique
  refreshToken String   @unique
  machine      String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Notification {
  id         String              @id @default(uuid())
  message    String
  recipient  String
  status     NotificationStatus  @default(UNREAD)
  createdAt  DateTime            @default(now())
  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
}

model MaterialCategory {
  id        String     @id @default(uuid())
  type      MaterielType
  nom       String
  quantite  Int
  materiels Material[]

DemandePretMateriel RequestLendMaterial[]
}

model Material {
  id             String             @id @default(uuid())
  nom            String
  categorie      MaterialCategory   @relation(fields: [categorieId], references: [id])
  categorieId    String
  specificites Json
  dateObtention  DateTime
  historique     HistoriqueMaterial[]

}

model HistoriqueMaterial {
  id          String    @id @default(uuid())
  materiel    Material  @relation(fields: [materielId], references: [id])
  materielId  String
  creeLe      DateTime  @default(now())
  misAJourLe  DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  dateEmprunt DateTime
  dateRetour  DateTime?
}

model Request {
  id             String                 @id @default(uuid())
  type           RequestType
  user           User                   @relation(fields: [userId], references: [id])
  userId         String
  creeLe         DateTime               @default(now())
  statut         RequestStatus          @default(PENDING)
  demandesAchat  RequestPurchaseMaterial?
  demandesPret   RequestLendMaterial?
  notes String ?
}

model RequestPurchaseMaterial {
  id              String      @id @default(uuid())
  requete         Request     @relation(fields: [requeteId], references: [id], onDelete: Cascade)
  requeteId       String @unique
  typeMateriel    MaterielType
  nom             String
  quantite        Float
  photo           String?
  specificites    Json
  estimationCout  Float
}

model RequestLendMaterial {
  id           String    @id @default(uuid())
  requete      Request   @relation(fields: [requeteId], references: [id], onDelete: Cascade)
  requeteId    String @unique
  materiel     MaterialCategory  @relation(fields: [materielId], references: [id])
  materielId   String
  quantite     Float
  dateDebut    DateTime
  dateFin      DateTime

}

enum MaterielType {
  FOURNITURES
  CONSOMMABLES
  EQUIPEMENT
  OUTILLAGE
}

enum RequestType {
  MISSION
  STAGE
  CONFERENCE
  ACHAT_MATERIEL
  PRET_MATERIEL
  DEPLACEMENT_HEBERGEMENT
  REPARATION_MAINTENANCE
  CONTRACTUEL
  INSCRIPTION_ARTICLE
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  END
}

enum NotificationStatus {
  UNREAD
  READ
}

enum Grade {
  Assistant
  MaitreAssistant
  MaitreDeConference
  Professeur
}

enum Role {
  ADMIN
  DOCTORANT
  MASTER
  ENSEIGNANT
  DIRECTEUR
}
