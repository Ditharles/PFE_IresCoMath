generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String               @id @default(uuid())
  email            String               @unique
  password         String
  role             Role
  phone            String?
  cin              String?              // Ajout de cin
  sessions         Session[]
  notifications    Notification[]
  doctoralStudent  DoctoralStudent?
  masterStudent    MasterStudent?
  teacherResearcher TeacherResearcher?
  admin            Admin?
  createdAt        DateTime             @default(now())
  requests         Request[]
  bankData         String?              @unique
  signature        String?
  equipmentHistory  EquipmentHistory[]

  @@index([email])
}

model DoctoralStudent {
  id               String              @id @default(uuid())
  lastName         String
  firstName        String
  cin              String              // Ajout de cin
  thesisYear       Int
  thesisSupervisor TeacherResearcher   @relation(fields: [thesisSupervisorId], references: [id])
  thesisSupervisorId String
  photo            String?
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String              @unique

  @@index([userId])
}

model DoctoralStudentRequest {
  id               String              @id @default(uuid())
  lastName         String
  firstName        String
  email            String              @unique
  phone            String              @unique
  cin              String              // Ajout de cin
  thesisYear       Int
  createdAt        DateTime            @default(now())
  thesisSupervisor TeacherResearcher   @relation(fields: [thesisSupervisorId], references: [id])
  thesisSupervisorId String
  status           RequestStatus       @default(PENDING)
  rejectionReason  String?
  photo            String?
  isConfirmed      Boolean             @default(false)

  @@index([email])
}

model MasterStudent {
  id               String              @id @default(uuid())
  lastName         String
  firstName        String
  cin              String              // Ajout de cin
  supervisor       TeacherResearcher   @relation(fields: [supervisorId], references: [id])
  supervisorId     String
  masterYear       Int
  photo            String?
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String              @unique

  @@index([userId])
}

model MasterStudentRequest {
  id               String              @id @default(uuid())
  lastName         String
  firstName        String
  email            String              @unique
  phone            String
  cin              String              // Ajout de cin
  masterYear       Int
  createdAt        DateTime            @default(now())
  supervisor       TeacherResearcher   @relation(fields: [supervisorId], references: [id])
  supervisorId     String
  status           RequestStatus       @default(PENDING)
  rejectionReason  String?
  photo            String?
  isConfirmed      Boolean             @default(false)

  @@index([email])
}

model TeacherResearcher {
  id                     String                 @id @default(uuid())
  lastName               String
  firstName              String
  cin                    String
  position               String
  grade                  Grade
  institution            String
  doctoralStudents       DoctoralStudent[]
  masterStudents         MasterStudent[]
  masterStudentRequests  MasterStudentRequest[]
  doctoralStudentRequests DoctoralStudentRequest[]
  photo                  String?
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String                 @unique

  @@index([userId])
}

model TeacherResearcherRequest {
  id              String        @id @default(uuid())
  lastName        String
  firstName       String
  email           String        @unique
  position        String
  phone           String
  cin             String        
  grade           Grade
  institution     String
  status          RequestStatus @default(PENDING)
  isConfirmed     Boolean       @default(false)
  rejectionReason String?
  photo           String?
  createdAt       DateTime      @default(now())

  @@index([email])
}

model Admin {
  id           Int    @id @default(autoincrement())
  lastName     String
  firstName    String
  cin          String 
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String @unique

  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  accessToken  String   @unique
  refreshToken String   @unique
  deviceInfo   String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model Notification {
  id         String             @id @default(uuid())
  title      String
  message    String
  type       NotificationType   
  status     NotificationStatus @default(UNREAD)
  createdAt  DateTime           @default(now())
  user       User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  @@index([userId])
  @@index([status])
  @@index([type])
}

enum NotificationType {
  REQUEST_RECEIVED
  NEW_REQUEST
  REQUEST_APPROVED
  REQUEST_REJECTED
  NEW_SESSION
  EQUIPMENT_BORROWED
  EQUIPMENT_RETURNED
  OTHER
}

model EquipmentCategory {
  id        String     @id @default(uuid())
  type      EquipmentType
  name      String
  quantity  Int
  equipments Equipment[]
  equipmentLoanRequests EquipmentLoanRequest[]
}

model Equipment {
  id             String             @id @default(uuid())
  name           String
  category       EquipmentCategory   @relation(fields: [categoryId], references: [id])
  categoryId     String
  specifications Json
  acquisitionDate DateTime
  history        EquipmentHistory[]

  EquipmentLoanRequest EquipmentLoanRequest[]
}

model EquipmentHistory {
  id          String    @id @default(uuid())
  equipment    Equipment  @relation(fields: [equipmentId], references: [id])
  equipmentId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  borrowDate  DateTime
  returnDate  DateTime?
}

model Request {
  id                String                 @id @default(uuid())
  type              RequestType
  user              User                   @relation(fields: [userId], references: [id])
  userId            String
  createdAt         DateTime               @default(now())
  status            RequestStatus          @default(PENDING)
  purchaseRequest PurchaseRequest?
  loanRequest     EquipmentLoanRequest?
  notes             String?
  stage         RequestStage?
  mission         Mission?
  scientificEvent ScientificEvent?
  articleRegistration ArticleRegistration?
}

model PurchaseRequest {
  id              String      @id @default(uuid())
  request         Request     @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId       String      @unique
  equipmentType    EquipmentType
  name            String
  url String? 
  quantity        Float
  photo           String?
  specifications  Json
  costEstimation  Float
}

model EquipmentLoanRequest {
  id           String    @id @default(uuid())
  request      Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId    String    @unique
  category     EquipmentCategory? @relation(fields: [categoryId], references: [id])
  categoryId    String?
equipment Equipment ? @relation(fields: [equipmentId	],references: [id])
equipmentId String?
  quantity     Float
  startDate    DateTime
  endDate      DateTime
}

model RequestStage {
  id                String    @id @default(uuid())
  request           Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId         String    @unique 
  organization           String
  organizationEmail      String
  organizationUrl      String?
  supervisor        String?
  supervisorEmail   String?
  supervisorPhone   String?
  letter            String
  country           String
  startDate         DateTime
  endDate           DateTime
}

model Mission {
  id          String    @id @default(uuid())
  request     Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String    @unique 
  hostOrganization String
  objective String
  country     String
  startDate   DateTime
  endDate     DateTime
  specificDocument String[]
  document String[]
}

model ScientificEvent {
  id              String    @id @default(uuid())
  request         Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId       String    @unique 
  location        String
  urlEvent String ?
  mailAcceptation String 
  title           String
  articlesAccepted Boolean
  articleCover    String?
  startDate       DateTime
  endDate         DateTime
}

model ArticleRegistration {
  id          String    @id @default(uuid())
  request     Request   @relation(fields: [requestId], references: [id], onDelete: Cascade)
  title String
  requestId   String    @unique 
  conference  String ?
  urlConference String ?
  articleCover String
  amount      String 
}

enum EquipmentType {
  SUPPLIES
  CONSUMABLES
  EQUIPMENT
  TOOLS
}

enum RequestType {
  MISSION
  INTERNSHIP
  CONFERENCE_NATIONAL
  EQUIPMENT_PURCHASE
  EQUIPMENT_LOAN 
  REPAIR_MAINTENANCE
  CONTRACTUAL
  ARTICLE_REGISTRATION
}

enum RequestStatus {
  PENDING
  APPROVED
  APPROVED_BY_SUPERVISOR
  APPROVED_BY_DIRECTOR
  REJECTED_BY_SUPERVISOR
  REJECTED_BY_DIRECTOR
  REJECTED
  COMPLETED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum Grade {
  Assistant
  MaitreAssistant
  MaitreDeConference
  Professeur
}

enum Role {
  ADMIN
  DOCTORANT
  MASTER
  ENSEIGNANT
  DIRECTEUR
}