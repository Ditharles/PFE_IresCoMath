generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  photo             String?
  role              Role
  phone             String?
  cin               String?
  sessions          Session[]
  notifications     Notification[]
  doctoralStudent   DoctoralStudent?
  masterStudent     MasterStudent?
  teacherResearcher TeacherResearcher?
  admin             Admin?
  createdAt         DateTime           @default(now())
  requests          Request[]
  bankData          String?            @unique
  signature         String?
  equipmentHistory  EquipmentHistory[]
status  UserStatus @default(ACTIVE)
  @@index([email])
}

enum UserStatus{
  ACTIVE
  DESACTIVE
}
model DoctoralStudent {
  id                 String            @id @default(uuid())
  thesisYear         Int
  thesisSupervisor   TeacherResearcher @relation(fields: [thesisSupervisorId], references: [id])
  thesisSupervisorId String
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String            @unique

  @@index([userId])
}

model DoctoralStudentRequest {
  id                 String            @id @default(uuid())
  lastName           String
  firstName          String
  email              String            @unique
  phone              String            @unique
  cin                String
  password           String
  thesisYear         Int
  createdAt          DateTime          @default(now())
  thesisSupervisor   TeacherResearcher @relation(fields: [thesisSupervisorId], references: [id])
  thesisSupervisorId String
  status             RequestStatus     @default(PENDING)
  rejectionReason    String?
  photo              String?
  isConfirmed        Boolean           @default(false)

  @@index([email])
}

model MasterStudent {
  id String @id @default(uuid())

  supervisor   TeacherResearcher @relation(fields: [supervisorId], references: [id])
  supervisorId String
  masterYear   Int
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String            @unique

  @@index([userId])
}

model MasterStudentRequest {
  id              String            @id @default(uuid())
  lastName        String
  firstName       String
  email           String            @unique
  phone           String
  cin             String
  password        String
  masterYear      Int
  createdAt       DateTime          @default(now())
  supervisor      TeacherResearcher @relation(fields: [supervisorId], references: [id])
  supervisorId    String
  status          RequestStatus     @default(PENDING)
  rejectionReason String?
  photo           String?
  isConfirmed     Boolean           @default(false)

  @@index([email])
}

model TeacherResearcher {
  id                      String                   @id @default(uuid())
  position                String
  grade                   Grade
  institution             String
  doctoralStudents        DoctoralStudent[]
  masterStudents          MasterStudent[]
  masterStudentRequests   MasterStudentRequest[]
  doctoralStudentRequests DoctoralStudentRequest[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

model TeacherResearcherRequest {
  id              String        @id @default(uuid())
  lastName        String
  firstName       String
  email           String        @unique
  position        String
  phone           String
  cin             String
  password        String
  grade           Grade
  institution     String
  status          RequestStatus @default(PENDING)
  isConfirmed     Boolean       @default(false)
  rejectionReason String?
  photo           String?
  createdAt       DateTime      @default(now())

  @@index([email])
}

model Admin {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  accessToken  String   @unique
  refreshToken String   @unique
  createdAt    DateTime @default(now())

  browserName     String   // Ex: "Chrome"
  browserVersion  String   // Ex: "125.0.0.0"
  ipAddress       String   // Ex: "192.168.1.5"

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}


model Notification {
  id        String             @id @default(uuid())
  title     String
  message   String
  type      NotificationType
  url String ?
  status    NotificationStatus @default(UNREAD)
  createdAt DateTime           @default(now())
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@index([userId])
  @@index([status])
  @@index([type])
}

enum NotificationType {
  REQUEST_RECEIVED
  NEW_REQUEST
  REQUEST_APPROVED
  REQUEST_REJECTED
  REQUEST_COMPLETED
  NEW_SESSION
  EQUIPMENT_BORROWED
  EQUIPMENT_RETURNED
  REQUEST_CLOSED
  OTHER
}

model EquipmentCategory {
  id                    String                 @id @default(uuid())
  type                  EquipmentType
  name                  String
  description           String?
  quantity              Int
  photo                 String[]
  equipments            Equipment[]
  equipmentLoanRequests EquipmentLoanRequest[]
}

model Equipment {
  id                   String                 @id @default(uuid())
  name                 String
  category             EquipmentCategory      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId           String
  notes                String?
  cost                 Float?
  bill                 String?
  specifications       Json
  acquisitionDate      DateTime
  photo                String[]
  history              EquipmentHistory[]
  status               EquipmentStatus        @default(AVAILABLE)
  EquipmentLoanRequest EquipmentLoanRequest[]
}

model EquipmentHistory {
  id          String    @id @default(uuid())
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  equipmentId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  borrowDate  DateTime
  returnDate  DateTime?
}

model Request {
  id                  String                @id @default(uuid())
  type                RequestType
  user                User                  @relation(fields: [userId], references: [id])
  userId              String
  createdAt           DateTime              @default(now())
  status              RequestStatus         @default(PENDING)
  purchaseRequest     PurchaseRequest?
  loanRequest         EquipmentLoanRequest?
  repairMaintenanceRequest RepairMaintenance?
  stage               RequestStage?
  mission             Mission?
  scientificEvent     ScientificEvent?
  articleRegistration ArticleRegistration?
  awaitForm           String?
  signForm            String?
  notes               String?

}

model PurchaseRequest {
  id             String        @id @default(uuid())
  request        Request       @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId      String        @unique
  equipmentType  EquipmentType
  name           String
  url            String?
  quantity       Float
  photo          String?
  specifications Json
  costEstimation Float
}

model EquipmentLoanRequest {
  id          String             @id @default(uuid())
  request     Request            @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId   String             @unique
  category    EquipmentCategory? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  equipment   Equipment?         @relation(fields: [equipmentId], references: [id])
  equipmentId String?
  quantity    Float
  startDate   DateTime
  endDate     DateTime
}

model RequestStage {
  id                String   @id @default(uuid())
  request           Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId         String   @unique
  organization      String
  organizationEmail String
  organizationUrl   String?
  supervisor        String?
  supervisorEmail   String?
  supervisorPhone   String?
  letter            String
  country           String
  startDate         DateTime
  endDate           DateTime
}

model Mission {
  id               String   @id @default(uuid())
  request          Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId        String   @unique
  hostOrganization String
  objective        String
  country          String
  startDate        DateTime
  endDate          DateTime
  specificDocument String[]
  document         String[]
}

model ScientificEvent {
  id               String   @id @default(uuid())
  request          Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  requestId        String   @unique
  location         String
  urlEvent         String?
  mailAcceptation  String
  title            String
  articlesAccepted Boolean
  articleCover     String?
  startDate        DateTime
  endDate          DateTime
}

model ArticleRegistration {
  id            String  @id @default(uuid())
  request       Request @relation(fields: [requestId], references: [id], onDelete: Cascade)
  title         String
  requestId     String  @unique
  conference    String?
  urlConference String?
  articleCover  String
  amount        String
}


model RepairMaintenance{
  id String @id @default(uuid())
  request Request @relation(fields:[requestId],references: [id],onDelete: Cascade)
  requestId String @unique
  description String
  photos String[]
}
model Template {
  id           String      @id @default(uuid())
  name         String
  for          RequestType @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  url          String
  language     Language    @default(FRANCAIS)
  placeholders String[]
}

enum Language {
  ARABE
  FRANCAIS
}

enum EquipmentType {
  SUPPLIES
  CONSUMABLES
  EQUIPMENT
  TOOLS
}

enum EquipmentStatus {
  AVAILABLE
  LOANED
  PENDING_DELIVERY
  OWNER_POSSESSION
}

enum RequestType {
  MISSION
  INTERNSHIP
  CONFERENCE_NATIONAL
  EQUIPMENT_PURCHASE
  EQUIPMENT_LOAN
  REPAIR_MAINTENANCE
  ARTICLE_REGISTRATION
}

enum RequestStatus {
  PENDING
  APPROVED
  APPROVED_BY_SUPERVISOR
  APPROVED_BY_DIRECTOR
  REJECTED_BY_SUPERVISOR
  REJECTED_BY_DIRECTOR
  REJECTED
  COMPLETED
  CLOSED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum Grade {
  Assistant
  MaitreAssistant
  MaitreDeConference
  Professeur
}

enum Role {
  ADMIN
  DOCTORANT
  MASTER
  ENSEIGNANT
  DIRECTEUR
}
