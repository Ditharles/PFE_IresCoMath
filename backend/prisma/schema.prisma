generator client {
  provider = "prisma-client-js"
  output = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Doctorant {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique
  dateInscription    DateTime
  createdAt          DateTime         @default(now())
  directeur_these    EnseignantChercheur @relation(fields: [directeur_these_id], references: [id])
  directeur_these_id String
  sessions_actives   Session[]
  password           String
  photo              String?
  notifications      Notification[]
}

model RequestDoctorant {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique
  dateInscription    DateTime
  createdAt          DateTime         @default(now())
  directeur_these    EnseignantChercheur @relation(fields: [directeur_these_id], references: [id])
  directeur_these_id String
  status             RequestStatus     @default(PENDING)
  rejectionReason    String?
  photo              String?
  isConfirm Boolean @default(false)

}

model Master {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique
  dateInscription    DateTime
  createdAt          DateTime         @default(now())
  encadrant          EnseignantChercheur @relation(fields: [encadrant_id], references: [id])
  encadrant_id       String
  sessions_actives   Session[]
  password           String
  photo              String?
  notifications      Notification[]
}

model RequestMaster {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique
  dateInscription    DateTime
  createdAt          DateTime         @default(now())
  encadrant          EnseignantChercheur @relation(fields: [encadrant_id], references: [id])
  encadrant_id       String
  status             RequestStatus     @default(PENDING)
  rejectionReason    String?
  photo              String?
  isConfirm Boolean @default(false)

}

model EnseignantChercheur {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique
  fonction           String
  grade              Grade
  etablissement      String
  doctorants         Doctorant[]
  requestDoctorant   RequestDoctorant[]
  requestMaster      RequestMaster[]
  masters            Master[]
  sessions_actives   Session[]
  password           String
  photo              String?
  notifications      Notification[]
}

model RequestEnseignantChercheur {
  id                 String            @id @default(uuid()) @unique
  nom                String
  prenom             String
  email              String            @unique
  fonction           String
  grade              Grade
  etablissement      String
  status             RequestStatus     @default(PENDING)
  isConfirm Boolean @default(false)
  rejectionReason    String?
  photo              String?
  createdAt          DateTime         @default(now())
}

model Session {
  id         String            @id @default(uuid()) @unique
  machine    String
  createdAt      DateTime
  doctorant  Doctorant?        @relation(fields: [doctorant_id], references: [id])
  doctorant_id String?
  master     Master?           @relation(fields: [master_id], references: [id])
  master_id  String?
  enseignant EnseignantChercheur? @relation(fields: [enseignant_id], references: [id])
  enseignant_id String?
}

model Admin {
  id            Int       @id @default(autoincrement())
  nom           String
  email String @unique
  prenom        String
  password      String
  notifications Notification[]
}

model Notification {
  id          Int      @id @default(autoincrement())
  message     String
  recipient   String
  status      NotificationStatus @default(UNREAD)
  createdAt   DateTime @default(now())
  admin       Admin?    @relation(fields: [admin_id], references: [id])
  admin_id    Int?
 doctorant  Doctorant?        @relation(fields: [doctorant_id], references: [id])
  doctorant_id String?
  master     Master?           @relation(fields: [master_id], references: [id])
  master_id  String?
  enseignant EnseignantChercheur? @relation(fields: [enseignant_id], references: [id])
  enseignant_id String?
}


enum RequestStatus {
  PENDING
  APPROVEDBYSUPERIEUR
  APPROVEDBYADMIN
  APPROVEDBYTWO
  REJECTEDBYSUPERIEUR
  REJECTEDBYADMIN
}

enum NotificationStatus {
  UNREAD
  READ
}

enum Grade {
  Assistant
  MaitreAssistant
  MaitreDeConference
  Professeur
}
