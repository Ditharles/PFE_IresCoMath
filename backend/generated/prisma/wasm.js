
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  createdAt: 'createdAt',
  bankData: 'bankData',
  signature: 'signature'
};

exports.Prisma.DoctorantScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  annee_these: 'annee_these',
  directeur_these_id: 'directeur_these_id',
  photo: 'photo',
  userId: 'userId'
};

exports.Prisma.RequestDoctorantScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  annee_these: 'annee_these',
  createdAt: 'createdAt',
  directeur_these_id: 'directeur_these_id',
  status: 'status',
  rejectionReason: 'rejectionReason',
  photo: 'photo',
  isConfirm: 'isConfirm'
};

exports.Prisma.MasterScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  encadrant_id: 'encadrant_id',
  annee_master: 'annee_master',
  photo: 'photo',
  userId: 'userId'
};

exports.Prisma.RequestMasterScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  annee_master: 'annee_master',
  createdAt: 'createdAt',
  encadrant_id: 'encadrant_id',
  status: 'status',
  rejectionReason: 'rejectionReason',
  photo: 'photo',
  isConfirm: 'isConfirm'
};

exports.Prisma.EnseignantChercheurScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  fonction: 'fonction',
  grade: 'grade',
  etablissement: 'etablissement',
  photo: 'photo',
  userId: 'userId'
};

exports.Prisma.RequestEnseignantChercheurScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  email: 'email',
  fonction: 'fonction',
  grade: 'grade',
  etablissement: 'etablissement',
  status: 'status',
  isConfirm: 'isConfirm',
  rejectionReason: 'rejectionReason',
  photo: 'photo',
  createdAt: 'createdAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  userId: 'userId'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  machine: 'machine',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  message: 'message',
  recipient: 'recipient',
  status: 'status',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.MaterialCategoryScalarFieldEnum = {
  id: 'id',
  type: 'type',
  nom: 'nom',
  quantite: 'quantite'
};

exports.Prisma.MaterialScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  categorieId: 'categorieId',
  specificites: 'specificites',
  dateObtention: 'dateObtention'
};

exports.Prisma.HistoriqueMaterialScalarFieldEnum = {
  id: 'id',
  materielId: 'materielId',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe',
  userId: 'userId',
  dateEmprunt: 'dateEmprunt',
  dateRetour: 'dateRetour'
};

exports.Prisma.RequestScalarFieldEnum = {
  id: 'id',
  type: 'type',
  userId: 'userId',
  creeLe: 'creeLe',
  statut: 'statut',
  notes: 'notes'
};

exports.Prisma.RequestPurchaseMaterialScalarFieldEnum = {
  id: 'id',
  requeteId: 'requeteId',
  typeMateriel: 'typeMateriel',
  nom: 'nom',
  quantite: 'quantite',
  photo: 'photo',
  specificites: 'specificites',
  estimationCout: 'estimationCout'
};

exports.Prisma.RequestLendMaterialScalarFieldEnum = {
  id: 'id',
  requeteId: 'requeteId',
  materielId: 'materielId',
  quantite: 'quantite',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  DOCTORANT: 'DOCTORANT',
  MASTER: 'MASTER',
  ENSEIGNANT: 'ENSEIGNANT',
  DIRECTEUR: 'DIRECTEUR'
};

exports.RequestStatus = exports.$Enums.RequestStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  END: 'END'
};

exports.Grade = exports.$Enums.Grade = {
  Assistant: 'Assistant',
  MaitreAssistant: 'MaitreAssistant',
  MaitreDeConference: 'MaitreDeConference',
  Professeur: 'Professeur'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  UNREAD: 'UNREAD',
  READ: 'READ'
};

exports.MaterielType = exports.$Enums.MaterielType = {
  FOURNITURES: 'FOURNITURES',
  CONSOMMABLES: 'CONSOMMABLES',
  EQUIPEMENT: 'EQUIPEMENT',
  OUTILLAGE: 'OUTILLAGE'
};

exports.RequestType = exports.$Enums.RequestType = {
  MISSION: 'MISSION',
  STAGE: 'STAGE',
  CONFERENCE: 'CONFERENCE',
  ACHAT_MATERIEL: 'ACHAT_MATERIEL',
  PRET_MATERIEL: 'PRET_MATERIEL',
  DEPLACEMENT_HEBERGEMENT: 'DEPLACEMENT_HEBERGEMENT',
  REPARATION_MAINTENANCE: 'REPARATION_MAINTENANCE',
  CONTRACTUEL: 'CONTRACTUEL',
  INSCRIPTION_ARTICLE: 'INSCRIPTION_ARTICLE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Doctorant: 'Doctorant',
  RequestDoctorant: 'RequestDoctorant',
  Master: 'Master',
  RequestMaster: 'RequestMaster',
  EnseignantChercheur: 'EnseignantChercheur',
  RequestEnseignantChercheur: 'RequestEnseignantChercheur',
  Admin: 'Admin',
  Session: 'Session',
  Notification: 'Notification',
  MaterialCategory: 'MaterialCategory',
  Material: 'Material',
  HistoriqueMaterial: 'HistoriqueMaterial',
  Request: 'Request',
  RequestPurchaseMaterial: 'RequestPurchaseMaterial',
  RequestLendMaterial: 'RequestLendMaterial'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
